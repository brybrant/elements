@use 'sass:color';
@use 'sass:math';
@use '../../node_modules/@brybrant/sass-okhsv-okhsl' as convert;

// particle keyframes
@keyframes air-particle {
  25% {
    opacity: 1;
    transform: translateX(3rem) scale(2);
  }

  50% {
    opacity: 0;
    transform: translateX(6rem) scale(2);
  }
}

// core keyframes
@keyframes air-core-before {
  100% {
    transform: rotate(360deg);
  }
}
@keyframes air-core-after {
  100% {
    transform: rotate(540deg) scale(0.8);
  }
}
@keyframes air-core-pulse {
  40% {
    opacity: 0;
  }

  60% {
    opacity: 0;
  }
}

.background {
  background: linear-gradient(
    convert.color_to_hex(convert.okhsl_to_rgba(220deg, 0.4, 0.3)),
    convert.color_to_hex(convert.okhsl_to_rgba(220deg, 0.2, 0.5)),
  );
}

// particle
.particle_container {
  position: absolute;
  inset: 0;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  transform: scale(1.5);
}

.particle {
  position: relative;
  width: 100%;
  height: 1.5625%;

  &:before, &:after {
    content: '';
    position: absolute;
    left: 0;
    display: block;
    width: 0;
    height: 0;
    border-top: 0.125rem solid transparent;
    border-bottom: 0.125rem solid transparent;
    opacity: 0;
    transform: scale(2);
    animation: 2s linear 0s infinite reverse air-particle;
    will-change: opacity, transform;
  }

  &:before {
    border-right: 0.1875rem solid #666;
  }

  &:after {
    border-left: 0.1875rem solid #fff;
    animation-direction: normal;
  }

  &:nth-child(64) {
    display: none;
  }
}

// fragment
.fragment_container {
  position: absolute;
  inset: 0;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  transform: scale(1.6);

  &:after {
    content: '';
    position: absolute;
    inset: 0;
    display: block;
    background: radial-gradient(
      closest-side,
      #fff,
      convert.okhsl_to_rgba(211deg, 0.03, 0.94, 0.9),
      convert.okhsl_to_rgba(212deg, 0.06, 0.88, 0.8),
      convert.okhsl_to_rgba(213deg, 0.09, 0.82, 0.7),
      convert.okhsl_to_rgba(214deg, 0.12, 0.76, 0.6),
      convert.okhsl_to_rgba(215deg, 0.15, 0.7, 0.5),
      convert.okhsl_to_rgba(216deg, 0.18, 0.64, 0.4),
      convert.okhsl_to_rgba(217deg, 0.21, 0.58, 0.3),
      convert.okhsl_to_rgba(218deg, 0.24, 0.52, 0.2),
      convert.okhsl_to_rgba(219deg, 0.27, 0.46, 0.1),
      convert.okhsl_to_rgba(220deg, 0.3, 0.4, 0),
    );
    transform: scale(1.25);
  }
}

.fragment {
  position: relative;
  width: 100%;
  height: 6.25%;

  &:before, &:after {
    content: '';
    position: absolute;
    left: -0.1875rem;
    display: block;
    width: 0.375rem;
    height: 0.375rem;
    border-radius: 50% 0 0 50%;
    background: linear-gradient(90deg, rgba(#888, .5), rgba(#888, 0));
    opacity: 0;
    transform: scale(2);
    animation: 2s linear 0s infinite reverse air-particle;
    will-change: opacity, transform;
  }

  &:after {
    border-radius: 0 50% 50% 0;
    background: linear-gradient(270deg, rgba(#fff, .5), rgba(#fff, 0));
    animation-direction: normal;
  }

  &:first-child {
    margin-top: 3.125%;
  }

  &:nth-child(16) {
    display: none;
  }
}

// core
.core_container {
  position: relative;
  width: 100%;
  height: 100%;
  filter: blur(2px);
  transform: scale(math.sqrt(2));
  mix-blend-mode: plus-lighter;
}

.core {
  position: absolute;
  inset: 0;

  &:before, &:after {
    content: '';
    position: absolute;
    inset: 0;
    border-top: 1px solid rgba(#fff, .5);
    border-right: 1px solid rgba(#fff, .5);
    border-radius: 50%;
    animation:
      4s linear 0s infinite air-core-before,
      5s linear 0s infinite air-core-pulse;
    will-change: opacity, transform;
  }

  &:after {
    transform: rotate(180deg) scale(0.8);
    animation-name: air-core-after, air-core-pulse;
    animation-direction: reverse;
  }
}

.button {
  background: convert.color_to_hex(convert.okhsl_to_rgba(220deg, 0.2, 0.4));

  &:hover {
    background: convert.color_to_hex(convert.okhsl_to_rgba(220deg, 0.2, 0.45));
  }

  &:active {
    background: convert.color_to_hex(convert.okhsl_to_rgba(220deg, 0.2, 0.35));
  }
}

// particle animation
$one32: math.div(1, 32);

@for $i from 1 through 31 {
  $scale: math.sqrt(1 - math.pow($i * $one32 - 1, 2));

  .particle {
    &:nth-child(#{$i}), &:nth-child(#{64 - $i}) {
      transform: scale($scale);
    }
  }
}

@for $i from 1 through 16 {
  .particle:nth-child(16n + #{$i}) {
    &:before, &:after {
      animation-delay: math.div(2s, 16) * ($i - 1);
    }
  }
}

// fragment animation
$one8: math.div(1, 8);

@for $i from 1 through 7 {
  $scale: math.sqrt(1 - math.pow($i * $one8 - 1, 2));

  .fragment {
    &:nth-child(#{$i}), &:nth-child(#{16 - $i}) {
      transform: scale($scale);
    }
  }
}

@for $i from 1 through 8 {
  .fragment:nth-child(8n + #{$i}) {
    &:before, &:after {
      animation-delay: math.div(2s, 8) * ($i - 1);
    }
  }
}

// core animation
@for $i from 1 through 4 {
  $rotation: math.div(360deg, 4) * ($i - 1);
  $duration: 4s - (math.div(3s, 4) * ($i - 1));
  $scale: math.pow(0.6, ($i - 1));

  .core:nth-child(#{$i}) {
    transform: rotate($rotation) scale($scale);

    &:before {
      animation-duration: $duration, $duration + 1;
    }

    &:after {
      animation-duration: $duration - 0.25, $duration + 0.75;
    }
  }
}