@use 'sass:color';
@use 'sass:math';
@use 'pkg:@brybrant/sass-okhsv-okhsl' as convert;

@use '../app' as *;

// particle keyframes
@keyframes earth-particle {
  100% {
    opacity: 0;
    transform: translateY(0) scale(1);
  }
}

// fragment keyframes
@keyframes earth-fragment {
  100% {
    opacity: 0;
    transform: translateY(0) scale(1);
  }
}

// core keyframes
@keyframes earth-core {
  100% {
    opacity: 0;
    transform: translate3d(0, 0, 0) scale(1.6);
  }
}

.background {
  background: linear-gradient(
    convert.color_to_hex(convert.okhsl_to_rgba(115deg, 0.9, 0.3)),
    convert.color_to_hex(convert.okhsl_to_rgba(115deg, 0.8, 0.5)),
  );
}

// particle
.particle_container {
  @extend %full-size;

  position: absolute;

  &:before {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      closest-side,
      #fff,
      convert.okhsl_to_rgba(133deg, 0.1, 0.94, 0.9),
      convert.okhsl_to_rgba(131deg, 0.2, 0.88, 0.8),
      convert.okhsl_to_rgba(129deg, 0.3, 0.82, 0.7),
      convert.okhsl_to_rgba(127deg, 0.4, 0.76, 0.6),
      convert.okhsl_to_rgba(125deg, 0.5, 0.7, 0.5),
      convert.okhsl_to_rgba(123deg, 0.6, 0.64, 0.4),
      convert.okhsl_to_rgba(121deg, 0.7, 0.58, 0.3),
      convert.okhsl_to_rgba(119deg, 0.8, 0.52, 0.2),
      convert.okhsl_to_rgba(117deg, 0.9, 0.46, 0.1),
      convert.okhsl_to_rgba(115deg, 1, 0.4, 0),
    );
    transform: scale(2);
  }
}

$_particle-size: 0.375rem;
$_particle-color: convert.color_to_hex(convert.okhsv_to_rgba(100deg, 0.9, 0.8));

.particle {
  position: absolute;
  top: 0;
  left: math.div($element-size - $_particle-size, 2);
  width: $_particle-size;
  height: 100%;

  &:before, &:after {
    content: '';
    position: absolute;
    display: block;
    width: 0;
    height: 0;
    border-right: 0.1875rem solid transparent;
    border-left: 0.1875rem solid transparent;
    animation: 2s ease-out 0s infinite earth-particle;
    will-change: opacity, transform;
  }

  &:before {
    top: -2rem;
    border-bottom: 0.3125rem solid $_particle-color;
    transform: translateY(5rem) scale(0);
  }

  &:after {
    bottom: -2rem;
    border-top: 0.3125rem solid $_particle-color;
    transform: translateY(-5rem) scale(0);
  }
}

// fragment
.fragment_container {
  @extend %full-size;

  position: absolute;
}

$_fragment-size: 1.25rem;

.fragment {
  position: absolute;
  top: 0;
  left: math.div($element-size - $_fragment-size, 2);
  width: $_fragment-size;
  height: 100%;

  &:before, &:after {
    content: '';
    position: absolute;
    display: block;
    width: $_fragment-size;
    height: $_fragment-size;
    border-radius: 50%;
    background: convert.color_to_hex(convert.okhsv_to_rgba(125deg, 0.75, 0.8));
    animation: 4s ease-out 0s infinite earth-fragment;
    will-change: opacity, transform;
  }

  &:before {
    top: -2.625rem;
    transform: translateY(5rem) scale(0);
  }

  &:after {
    bottom: -2.625rem;
    transform: translateY(-5rem) scale(0);
  }
}

// core
.core_container {
  position: relative;
  width: 100%;
  height: 100%;
  mix-blend-mode: screen;
  mix-blend-mode: plus-lighter;
}

.core {
  @extend %full-size;

  position: absolute;

  &:before {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1 1'%3E%3Cpath fill='%239c3' d='M.5 0 .02 .35 .21 .9 .79 .9 .98 .35 .5 0z'/%3E%3C/svg%3E");
    opacity: 0.5;
    transform: translate3d(0, 0, 0) scale(0);
    animation: 2s ease-out 0s infinite earth-core;
    backface-visibility: hidden;
    will-change: opacity, transform;
  }
}

// particle animation
@for $i from 1 through 64 {
  $rotation: math.div(360deg, 64) * ($i - 1);

  .particle:nth-child(#{$i}) {
    transform: rotate($rotation);

    &:before, &:after {
      animation-duration: 2s * math.random() + 1;
      animation-delay: 1s * math.random();
    }
  }
}

// fragment animation
@for $i from 1 through 16 {
  $rotation: math.div(-360deg, 16) * ($i - 1);
  $delay: math.div(4s, 16) * ($i - 1);

  .fragment:nth-child(#{$i}) {
    transform: rotate($rotation);

    &:before, &:after {
      animation-delay: $delay;
    }
  }
}

// core animation
@for $i from 1 through 4 {
  $rotation: math.div(72deg, 4) * ($i - 1);
  $delay: math.div(2s, 4) * ($i - 1);

  .core:nth-child(#{$i}) {
    transform: rotate($rotation);

    &:before {
      animation-delay: $delay;
    }
  }
}